{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Simple Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "#LIBRARY\n",
    "\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "import seaborn as sns "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. importing dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>YearsExperience</th>\n",
       "      <th>Salary</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.1</td>\n",
       "      <td>39343.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.3</td>\n",
       "      <td>46205.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.5</td>\n",
       "      <td>37731.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2.0</td>\n",
       "      <td>43525.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.2</td>\n",
       "      <td>39891.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   YearsExperience   Salary\n",
       "0              1.1  39343.0\n",
       "1              1.3  46205.0\n",
       "2              1.5  37731.0\n",
       "3              2.0  43525.0\n",
       "4              2.2  39891.0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Read csv dan menampilan lima Data Teratas\n",
    "\n",
    "df = pd.read_csv('Salary_Data.csv')\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30, 2)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = df.iloc[:, :-1].values\n",
    "y = df.iloc[:, -1].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Splitting training and test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Fitting into training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor = LinearRegression()\n",
    "regressor.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. predict the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = regressor.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 40835.10590871, 123079.39940819,  65134.55626083,  63265.36777221,\n",
       "       115602.64545369, 108125.8914992 , 116537.23969801,  64199.96201652,\n",
       "        76349.68719258, 100649.1375447 ])"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ 37731., 122391.,  57081.,  63218., 116969., 109431., 112635.,\n",
       "        55794.,  83088., 101302.])"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "26816.192244031183"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.intercept_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Plot the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.scatter(X_train, y_train, color = 'red')\n",
    "plt.plot(X_train, regressor.predict(X_train), color = 'blue')\n",
    "plt.title('Salary vs Experience (Training set)')\n",
    "plt.xlabel('Years of Experience')\n",
    "plt.ylabel('Salary')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#semakin lama waktu pengalaman bekerja maka berbanding dengan salary, semakin tinggi experience maka akan semakin tinggi salary "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp = pd.DataFrame({'Actual':y_test,'Predict':y_pred})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "temp.plot(kind='bar',figsize=(10,8))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Berdasarkan plot dapat diketahui selisih nilai train/test memiliki selisih nilai yang kecil dengan hasil prediksi "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAmkAAAHVCAYAAACqkWxBAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO3de5xdZX3v8c/PhBJAiCQECgk4qYRyiSXCHAwXK55UiQ3lUk2NlxI1NUdE0XqONqh9kZeVnqAcrbaCJ8dgAtUEjAKxiMpF1CoEhhDlEiJBApmGS0wwhkIoCb/zx14DO8PMBGb2nnlm8nm/Xvs1ez9rPev37GHIfOdZz1o7MhNJkiSV5RUDPQBJkiS9mCFNkiSpQIY0SZKkAhnSJEmSCmRIkyRJKpAhTZIkqUDDB3oAjbbffvtlS0vLQA9DkiRpp+64447fZuaYrrYNuZDW0tJCW1vbQA9DkiRppyLioe62ebpTkiSpQIY0SZKkAhnSJEmSCjTk1qRJkqSB9eyzz9Le3s7WrVsHeijFGDFiBOPGjWO33XZ7yX0MaZIkqaHa29vZe++9aWlpISIGejgDLjPZuHEj7e3tjB8//iX383SnJElqqK1btzJ69GgDWiUiGD169MueWTSkSZKkhjOg7ag33w9DmiRJGpKuuuoqIoL77ruvx/0WLlzI+vXre13n5ptv5tRTT+11/+64Jk2SJDVVy5xrG3q8tfOmvaT9Fi9ezEknncSSJUuYO3dut/stXLiQiRMnctBBBzVohI3hTJokSRpynnzySX7+85+zYMEClixZ8nz75z//eV772tdy9NFHM2fOHJYuXUpbWxvvfve7mTRpEk8//TQtLS389re/BaCtrY2TTz4ZgNtuu40TTjiB173udZxwwgmsXr26qe/BmTRJkjTkXH311UydOpXDDjuMUaNGsWLFCh577DGuvvpqli9fzp577smmTZsYNWoU//Iv/8JFF11Ea2trj8c8/PDD+elPf8rw4cO54YYb+NSnPsV3vvOdpr0HQ5okSRpyFi9ezMc+9jEAZsyYweLFi3nuued43/vex5577gnAqFGjXtYxN2/ezMyZM7n//vuJCJ599tmGj7ueIU2SJA0pGzdu5KabbuLuu+8mIti+fTsRwdve9raXdJXl8OHDee655wB2uG3G3//93/OmN72Jq666irVr1z5/GrRZXJMmSZKGlKVLl3LWWWfx0EMPsXbtWtatW8f48eMZNWoUl156KU899RQAmzZtAmDvvfdmy5Ytz/dvaWnhjjvuANjhdObmzZsZO3YsULvYoNkMaZIkaUhZvHgxZ5555g5tb3vb21i/fj2nnXYara2tTJo0iYsuugiA9773vXzwgx98/sKB888/n49+9KO84Q1vYNiwYc8f45Of/CTnnXceJ554Itu3b2/6+4jMbHqR/tTa2pptbW0DPQxJknZZq1at4ogjjhjoYRSnq+9LRNyRmV1eseBMmiRJUoEMaZIkSQUypEmSJBXIW3BIerG5I3vYtrn/xiFJuzBn0iRJkgpkSJMkSSqQIU2SJA05w4YNY9KkSUycOJHp06c/fwPb3rj55ps59dRTAVi2bBnz5s3rdt/f/e53XHzxxb2uVc81aZIkqbl6Wufaq+PtfG3sHnvswcqVKwF497vfzde+9jU+/vGPP789M8lMXvGKlzdfddppp3Haaad1u70jpH3oQx96WcftijNpkiRpSHvDG97AmjVrWLt2LUcccQQf+tCHOOaYY1i3bh0/+tGPOP744znmmGOYPn06Tz75JAA/+MEPOPzwwznppJP47ne/+/yxFi5cyIc//GEAHnvsMc4880yOPvpojj76aH7xi18wZ84cHnjgASZNmsQnPvGJPo3bkCZJkoasbdu2cd111/Ha174WgNWrV3PWWWdx5513stdee/G5z32OG264gRUrVtDa2soXv/hFtm7dygc+8AG+973v8bOf/YxHH320y2Ofe+65vPGNb+SXv/wlK1as4KijjmLevHm85jWvYeXKlXzhC1/o09gNaZIkach5+umnmTRpEq2trRxyyCHMmjULgFe/+tVMnjwZgFtvvZV7772XE088kUmTJrFo0SIeeugh7rvvPsaPH8+ECROICN7znvd0WeOmm27i7LPPBmpr4EaObOxpXdekSZKkIad+TVq9vfba6/nnmcmb3/xmFi9evMM+K1euJCKaPsadcSZNkiTtkiZPnszPf/5z1qxZA8BTTz3Fr3/9aw4//HAefPBBHnjgAYAXhbgOU6ZM4ZJLLgFg+/bt/P73v2fvvfdmy5YtDRmfM2nSLqplzrXdbls7oh8HIkkDZMyYMSxcuJB3vvOdPPPMMwB87nOf47DDDmP+/PlMmzaN/fbbj5NO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\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "temp_1 = pd.DataFrame({'Actual':y_train,'Predict':regressor.predict(X_train)})\n",
    "temp_1.plot(kind='bar',figsize=(10,8))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Evaluate Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse :21026037.3295113\n",
      "mae :3426.4269374307078\n"
     ]
    }
   ],
   "source": [
    "mse = 1/len(X_test) * np.sum((y_pred - y_test)**2)\n",
    "mae = 1/len(X_test) * np.sum(np.abs(y_pred - y_test))\n",
    "print('mse :{}'.format(mse))\n",
    "print('mae :{}'.format(mae))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Multiple Linear Regression"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. importing dataset "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "dataset = pd.read_csv('50_Startups.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R&amp;D Spend</th>\n",
       "      <th>Administration</th>\n",
       "      <th>Marketing Spend</th>\n",
       "      <th>State</th>\n",
       "      <th>Profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>165349.20</td>\n",
       "      <td>136897.80</td>\n",
       "      <td>471784.10</td>\n",
       "      <td>New York</td>\n",
       "      <td>192261.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>162597.70</td>\n",
       "      <td>151377.59</td>\n",
       "      <td>443898.53</td>\n",
       "      <td>California</td>\n",
       "      <td>191792.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>153441.51</td>\n",
       "      <td>101145.55</td>\n",
       "      <td>407934.54</td>\n",
       "      <td>Florida</td>\n",
       "      <td>191050.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>144372.41</td>\n",
       "      <td>118671.85</td>\n",
       "      <td>383199.62</td>\n",
       "      <td>New York</td>\n",
       "      <td>182901.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>142107.34</td>\n",
       "      <td>91391.77</td>\n",
       "      <td>366168.42</td>\n",
       "      <td>Florida</td>\n",
       "      <td>166187.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   R&D Spend  Administration  Marketing Spend       State     Profit\n",
       "0  165349.20       136897.80        471784.10    New York  192261.83\n",
       "1  162597.70       151377.59        443898.53  California  191792.06\n",
       "2  153441.51       101145.55        407934.54     Florida  191050.39\n",
       "3  144372.41       118671.85        383199.62    New York  182901.99\n",
       "4  142107.34        91391.77        366168.42     Florida  166187.94"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(50, 5)"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R&amp;D Spend</th>\n",
       "      <th>Administration</th>\n",
       "      <th>Marketing Spend</th>\n",
       "      <th>Profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>73721.615600</td>\n",
       "      <td>121344.639600</td>\n",
       "      <td>211025.097800</td>\n",
       "      <td>112012.639200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>45902.256482</td>\n",
       "      <td>28017.802755</td>\n",
       "      <td>122290.310726</td>\n",
       "      <td>40306.180338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>51283.140000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14681.400000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>39936.370000</td>\n",
       "      <td>103730.875000</td>\n",
       "      <td>129300.132500</td>\n",
       "      <td>90138.902500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>73051.080000</td>\n",
       "      <td>122699.795000</td>\n",
       "      <td>212716.240000</td>\n",
       "      <td>107978.190000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>101602.800000</td>\n",
       "      <td>144842.180000</td>\n",
       "      <td>299469.085000</td>\n",
       "      <td>139765.977500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>165349.200000</td>\n",
       "      <td>182645.560000</td>\n",
       "      <td>471784.100000</td>\n",
       "      <td>192261.830000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           R&D Spend  Administration  Marketing Spend         Profit\n",
       "count      50.000000       50.000000        50.000000      50.000000\n",
       "mean    73721.615600   121344.639600    211025.097800  112012.639200\n",
       "std     45902.256482    28017.802755    122290.310726   40306.180338\n",
       "min         0.000000    51283.140000         0.000000   14681.400000\n",
       "25%     39936.370000   103730.875000    129300.132500   90138.902500\n",
       "50%     73051.080000   122699.795000    212716.240000  107978.190000\n",
       "75%    101602.800000   144842.180000    299469.085000  139765.977500\n",
       "max    165349.200000   182645.560000    471784.100000  192261.830000"
      ]
     },
     "execution_count": 121,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'dataset' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-6-c0a1ca8ade7e>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[1;32m----> 1\u001b[1;33m \u001b[0msns\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mdataset\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mcorr\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[1;33m=\u001b[0m\u001b[1;32mTrue\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m: name 'dataset' is not defined"
     ]
    }
   ],
   "source": [
    "sns.heatmap(dataset.corr(), annot=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Terdapat beberapa variabel yang saling berkorelasi R&D Spend dengan Marketing Spend korelasinya 0.72, R&D Spend berkolerasi dengan Profit 0.97"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "R&D Spend          0\n",
       "Administration     0\n",
       "Marketing Spend    0\n",
       "State              0\n",
       "Profit             0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Florida</th>\n",
       "      <th>New York</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Florida  New York\n",
       "0        0         1\n",
       "1        0         0\n",
       "2        1         0\n",
       "3        0         1\n",
       "4        1         0"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dataset_dummies = pd.get_dummies(dataset['State'],drop_first=True)\n",
    "dataset_dummies.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "temp_3 = pd.concat([dataset_dummies,dataset], axis = 1)\n",
    "temp_3.drop(['State','Marketing Spend','Administration','Florida','New York'],axis=1,inplace =True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>R&amp;D Spend</th>\n",
       "      <th>Profit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>165349.20</td>\n",
       "      <td>192261.83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>162597.70</td>\n",
       "      <td>191792.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>153441.51</td>\n",
       "      <td>191050.39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>144372.41</td>\n",
       "      <td>182901.99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>142107.34</td>\n",
       "      <td>166187.94</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   R&D Spend     Profit\n",
       "0  165349.20  192261.83\n",
       "1  162597.70  191792.06\n",
       "2  153441.51  191050.39\n",
       "3  144372.41  182901.99\n",
       "4  142107.34  166187.94"
      ]
     },
     "execution_count": 126,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "temp_3.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = temp_3.iloc[:, :-1].values\n",
    "y = temp_3.iloc[:, -1].values"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Splitting training and test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 1/3, random_state = 0)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Fitting into training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LinearRegression()"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor = LinearRegression()\n",
    "regressor.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. predict the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = regressor.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "47302.43993374131"
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "regressor.intercept_"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Plot the result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "temp_4 = pd.DataFrame({'Actual':y_test,'Predict':y_pred})\n",
    "temp_4.plot(kind='bar',figsize=(10,8))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 133,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x576 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "temp_4 = pd.DataFrame({'Actual':y_train,'Predict':regressor.predict(X_train)})\n",
    "temp_4.plot(kind='bar',figsize=(10,8))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mse :75085549.76169327\n",
      "mae :7176.432276949292\n"
     ]
    }
   ],
   "source": [
    "mse = 1/len(X_test) * np.sum((y_pred - y_test)**2)\n",
    "mae = 1/len(X_test) * np.sum(np.abs(y_pred - y_test))\n",
    "print('mse :{}'.format(mse))\n",
    "print('mae :{}'.format(mae))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Bonus, linear regression with statsmodel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm\n",
    "from scipy import stats"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                            OLS Regression Results                            \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   R-squared:                       0.613\n",
      "Model:                            OLS   Adj. R-squared:                  0.579\n",
      "Method:                 Least Squares   F-statistic:                     17.83\n",
      "Date:                Mon, 17 Aug 2020   Prob (F-statistic):           7.78e-09\n",
      "Time:                        23:45:00   Log-Likelihood:                -576.91\n",
      "No. Observations:                  50   AIC:                             1164.\n",
      "Df Residuals:                      45   BIC:                             1173.\n",
      "Df Model:                           4                                         \n",
      "Covariance Type:            nonrobust                                         \n",
      "==============================================================================\n",
      "                 coef    std err          t      P>|t|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "const       1.903e+04   1.84e+04      1.033      0.307   -1.81e+04    5.61e+04\n",
      "x1         -1703.7028   9337.989     -0.182      0.856   -2.05e+04    1.71e+04\n",
      "x2          3875.7625   9002.603      0.431      0.669   -1.43e+04     2.2e+04\n",
      "x3             0.3239      0.133      2.426      0.019       0.055       0.593\n",
      "x4             0.2507      0.031      7.997      0.000       0.188       0.314\n",
      "==============================================================================\n",
      "Omnibus:                        5.729   Durbin-Watson:                   1.266\n",
      "Prob(Omnibus):                  0.057   Jarque-Bera (JB):                5.349\n",
      "Skew:                          -0.461   Prob(JB):                       0.0689\n",
      "Kurtosis:                       4.311   Cond. No.                     1.34e+06\n",
      "==============================================================================\n",
      "\n",
      "Warnings:\n",
      "[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n",
      "[2] The condition number is large, 1.34e+06. This might indicate that there are\n",
      "strong multicollinearity or other numerical problems.\n"
     ]
    }
   ],
   "source": [
    "X2 = sm.add_constant(X)\n",
    "est = sm.OLS(y, X2)\n",
    "est2 = est.fit()\n",
    "print(est2.summary())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = temp_3.iloc[:, :-1].values\n",
    "y = temp_3.iloc[:, -1].values"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
